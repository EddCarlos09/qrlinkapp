{"ast":null,"code":"var _jsxFileName = \"D:\\\\qrlinkapp\\\\src\\\\pages\\\\Dashboard.js\",\n  _s = $RefreshSig$();\n// src/components/Dashboard.js\nimport React, { useEffect, useState } from 'react';\nimport Layout from '../components/Layout';\nimport CreateQRModal from './QR/CreateQRModal';\nimport EditQRModal from './QR/EditQRModal';\nimport ConfirmDeleteModal from '../components/utils/ConfirmDeleteModal';\nimport PaginatedQRGrid from '../components/PaginatedQRGrid';\nimport httpService from '../services/httpService';\nimport Toast from '../components/utils/Toast';\nimport Spinner from '../components/utils/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [qrCodes, setQrCodes] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [qrToEdit, setQrToEdit] = useState(null);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [qrToDelete, setQrToDelete] = useState(null);\n  const [shouldReload, setShouldReload] = useState(false);\n  const [toastMsg, setToastMsg] = useState('');\n  // Crear nuevo QR\n  const handleCreate = async newQR => {\n    try {\n      setLoading(true);\n      const response = await httpService.post('/qrlink', {\n        url: newQR.url,\n        alias: newQR.alias,\n        fgColor: newQR.fgColor,\n        bgColor: newQR.bgColor,\n        size: newQR.size\n      });\n      if (response.status === 201) {\n        setToastMsg('¡Registro capturado!'); // <-- Mostrar el toast\n        setShouldReload(true); // <-- Activar recarga\n        setIsCreateModalOpen(false); // <-- Cerrar el modal de crear\n      }\n    } catch (error) {\n      console.error('Error al crear QR:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleEdit = qr => {\n    setQrToEdit(qr);\n    setIsEditModalOpen(true);\n  };\n  const handleUpdate = async updatedQR => {\n    try {\n      setLoading(true);\n      console.log(\"updatedQR: \");\n      console.log(updatedQR);\n      const response = await httpService.put(`/qrlink/${updatedQR.id}`, updatedQR);\n      if (response.status === 200) {\n        setToastMsg('¡QR actualizado!');\n        setIsEditModalOpen(false);\n        setShouldReload(true); // <-- Refrescar la grilla\n      }\n    } catch (error) {\n      console.error('Error al actualizar QR:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Eliminar QR\n  const confirmDelete = id => {\n    const qr = qrCodes.find(q => q.id === id);\n    setQrToDelete(qr);\n    setIsDeleteModalOpen(true);\n  };\n  const handleDeleteConfirmed = () => {\n    setQrCodes(qrCodes.filter(qr => qr.id !== qrToDelete.id));\n    setIsDeleteModalOpen(false);\n    setQrToDelete(null);\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: [toastMsg && /*#__PURE__*/_jsxDEV(Toast, {\n      message: toastMsg,\n      onClose: () => setToastMsg('')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 20\n    }, this), loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(CreateQRModal, {\n      isOpen: isCreateModalOpen,\n      onClose: () => setIsCreateModalOpen(false),\n      onCreate: handleCreate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EditQRModal, {\n      isOpen: isEditModalOpen,\n      onClose: () => setIsEditModalOpen(false),\n      onUpdate: handleUpdate,\n      qrToEdit: qrToEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmDeleteModal, {\n      isOpen: isDeleteModalOpen,\n      onCancel: () => setIsDeleteModalOpen(false),\n      onConfirm: handleDeleteConfirmed,\n      qrName: qrToDelete === null || qrToDelete === void 0 ? void 0 : qrToDelete.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-green-700\",\n        children: \"Active QR Codes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsCreateModalOpen(true),\n        className: \"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition\",\n        children: \"+ Crear QR Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaginatedQRGrid, {\n      onEdit: handleEdit,\n      onDelete: confirmDelete,\n      shouldReload: shouldReload,\n      onReloaded: () => setShouldReload(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"SRTUora/GZFj530QUHrFX7T1U1k=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","Layout","CreateQRModal","EditQRModal","ConfirmDeleteModal","PaginatedQRGrid","httpService","Toast","Spinner","jsxDEV","_jsxDEV","Dashboard","_s","qrCodes","setQrCodes","loading","setLoading","isCreateModalOpen","setIsCreateModalOpen","isEditModalOpen","setIsEditModalOpen","qrToEdit","setQrToEdit","isDeleteModalOpen","setIsDeleteModalOpen","qrToDelete","setQrToDelete","shouldReload","setShouldReload","toastMsg","setToastMsg","handleCreate","newQR","response","post","url","alias","fgColor","bgColor","size","status","error","console","handleEdit","qr","handleUpdate","updatedQR","log","put","id","confirmDelete","find","q","handleDeleteConfirmed","filter","children","message","onClose","fileName","_jsxFileName","lineNumber","columnNumber","isOpen","onCreate","onUpdate","onCancel","onConfirm","qrName","name","className","onClick","onEdit","onDelete","onReloaded","_c","$RefreshReg$"],"sources":["D:/qrlinkapp/src/pages/Dashboard.js"],"sourcesContent":["// src/components/Dashboard.js\nimport React, { useEffect, useState } from 'react';\nimport Layout from '../components/Layout';\nimport CreateQRModal from './QR/CreateQRModal';\nimport EditQRModal from './QR/EditQRModal';\nimport ConfirmDeleteModal from '../components/utils/ConfirmDeleteModal';\nimport PaginatedQRGrid from '../components/PaginatedQRGrid';\nimport httpService from '../services/httpService';\nimport Toast from '../components/utils/Toast';\nimport Spinner from '../components/utils/Spinner';\n\nconst Dashboard = () => {\n\n\n  const [qrCodes, setQrCodes] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [qrToEdit, setQrToEdit] = useState(null);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [qrToDelete, setQrToDelete] = useState(null);\n\n  const [shouldReload, setShouldReload] = useState(false);\n  const [toastMsg, setToastMsg] = useState('');\n  // Crear nuevo QR\n  const handleCreate = async (newQR) => {\n    try {\n      setLoading(true);\n  \n      const response = await httpService.post('/qrlink', {\n        url: newQR.url,\n        alias: newQR.alias,\n        fgColor: newQR.fgColor,\n        bgColor: newQR.bgColor,\n        size: newQR.size,\n      });\n      if (response.status === 201) {\n        setToastMsg('¡Registro capturado!'); // <-- Mostrar el toast\n        setShouldReload(true); // <-- Activar recarga\n        setIsCreateModalOpen(false); // <-- Cerrar el modal de crear\n      }\n    } catch (error) {\n      console.error('Error al crear QR:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEdit = (qr) => {\n    setQrToEdit(qr);\n    setIsEditModalOpen(true);\n  };\n  \n  const handleUpdate = async (updatedQR) => {\n    try {\n      setLoading(true);\n      console.log(\"updatedQR: \");\n      console.log(updatedQR);\n      const response = await httpService.put(`/qrlink/${updatedQR.id}`, updatedQR);\n      if (response.status === 200) {\n        setToastMsg('¡QR actualizado!');\n        setIsEditModalOpen(false);\n        setShouldReload(true); // <-- Refrescar la grilla\n      }\n    } catch (error) {\n      console.error('Error al actualizar QR:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  // Eliminar QR\n  const confirmDelete = (id) => {\n    const qr = qrCodes.find((q) => q.id === id);\n    setQrToDelete(qr);\n    setIsDeleteModalOpen(true);\n  };\n\n  const handleDeleteConfirmed = () => {\n    setQrCodes(qrCodes.filter((qr) => qr.id !== qrToDelete.id));\n    setIsDeleteModalOpen(false);\n    setQrToDelete(null);\n  };\n  \n  return (\n    <Layout>\n      {toastMsg && <Toast message={toastMsg} onClose={() => setToastMsg('')} />}\n      {loading ? ( <Spinner />) : (<div></div>)}\n      {/* Modales */}\n      <CreateQRModal\n        isOpen={isCreateModalOpen}\n        onClose={() => setIsCreateModalOpen(false)}\n        onCreate={handleCreate}\n      />\n      <EditQRModal\n        isOpen={isEditModalOpen}\n        onClose={() => setIsEditModalOpen(false)}\n        onUpdate={handleUpdate}\n        qrToEdit={qrToEdit}\n      />\n      <ConfirmDeleteModal\n        isOpen={isDeleteModalOpen}\n        onCancel={() => setIsDeleteModalOpen(false)}\n        onConfirm={handleDeleteConfirmed}\n        qrName={qrToDelete?.name}\n      />\n\n      {/* Header interno de dashboard */}\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-3xl font-bold text-green-700\">Active QR Codes</h1>\n        <button\n          onClick={() => setIsCreateModalOpen(true)}\n          className=\"bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition\"\n        >\n          + Crear QR Code\n        </button>\n      </div>\n\n        <PaginatedQRGrid\n          onEdit={handleEdit}\n          onDelete={confirmDelete}\n          shouldReload={shouldReload}\n          onReloaded={() => setShouldReload(false)}\n        />\n        \n    </Layout>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}